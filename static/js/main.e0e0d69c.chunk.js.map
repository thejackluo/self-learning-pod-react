{"version":3,"sources":["js/components/Table.js","js/components/Form.js","js/components/App.js","js/other/serviceWorker.js","index.js"],"names":["TableHeader","TableBody","props","rows","characterData","map","row","index","key","name","job","className","onClick","removeCharacter","Table","Form","initialState","state","handleChange","event","target","value","setState","submitForm","handleSubmit","this","htmlFor","type","id","onChange","class","Component","App","characters","filter","character","i","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2SAIMA,EAAc,WAClB,OACE,+BACE,4BACE,oCACA,sCAMFC,EAAY,SAACC,GACjB,IAAMC,EAAOD,EAAME,cAAcC,KAAI,SAACC,EAAKC,GACzC,OACE,wBAAIC,IAAKD,GACP,4BAAKD,EAAIG,MACT,4BAAKH,EAAII,KACT,4BACE,4BACEC,UAAU,kBACVC,QAAS,kBAAMV,EAAMW,gBAAgBN,KAFvC,eAWR,OAAO,+BAAQJ,IAmBFW,EAhBD,SAACZ,GAAW,IAChBE,EAAmCF,EAAnCE,cAAeS,EAAoBX,EAApBW,gBAEvB,OACE,yBAAKF,UAAU,SACb,2BAAOA,UAAU,SACf,kBAAC,EAAD,MACA,kBAAC,EAAD,CACEP,cAAeA,EACfS,gBAAiBA,O,OCeZE,E,4MAvDbC,aAAe,CACbP,KAAM,GACNC,IAAK,I,EAGPO,MAAQ,EAAKD,a,EAEbE,aAAe,SAACC,GAAW,IAAD,EACAA,EAAMC,OAAtBX,EADgB,EAChBA,KAAMY,EADU,EACVA,MAEd,EAAKC,SAAL,eACGb,EAAOY,K,EAIZE,WAAa,WACX,EAAKrB,MAAMsB,aAAa,EAAKP,OAC7B,EAAKK,SAAS,EAAKN,e,uDAGX,IAAD,EACeS,KAAKR,MAAnBR,EADD,EACCA,KAAMC,EADP,EACOA,IAEd,OACE,0BAAMC,UAAU,QACd,wCACA,2BAAOe,QAAQ,QAAf,QACA,2BACEf,UAAU,eACVgB,KAAK,OACLlB,KAAK,OACLmB,GAAG,OACHP,MAAOZ,EACPoB,SAAUJ,KAAKP,eAEjB,2BAAOQ,QAAQ,OAAf,OACA,2BACEf,UAAU,eACVgB,KAAK,OACLlB,KAAK,MACLmB,GAAG,MACHP,MAAOX,EACPmB,SAAUJ,KAAKP,eAEjB,2BACEY,MAAM,kBACNH,KAAK,SACLN,MAAM,SACNT,QAASa,KAAKF,kB,GAjDLQ,aC4CJC,E,4MAzCbf,MAAQ,CACNgB,WAAY,CACV,CACExB,KAAM,OACNC,IAAK,kB,EAKXG,gBAAkB,SAACN,GAAW,IACpB0B,EAAe,EAAKhB,MAApBgB,WAER,EAAKX,SAAS,CACZW,WAAYA,EAAWC,QAAO,SAACC,EAAWC,GACxC,OAAOA,IAAM7B,Q,EAKnBiB,aAAe,SAACW,GACd,EAAKb,SAAS,CAAEW,WAAW,GAAD,mBAAM,EAAKhB,MAAMgB,YAAjB,CAA6BE,O,uDAG/C,IACAF,EAAeR,KAAKR,MAApBgB,WAER,OACE,yBAAKtB,UAAU,OACb,yBAAKA,UAAU,mBACb,2CACA,kBAAC,EAAD,CAAMa,aAAcC,KAAKD,eACzB,kBAAC,EAAD,CACEpB,cAAe6B,EACfpB,gBAAiBY,KAAKZ,wB,GAlChBkB,aCMEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.e0e0d69c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"../../css/frameworks/bootstrap.min.css\";\r\nimport \"../../css/frameworks/normalize.css\";\r\n\r\nconst TableHeader = () => {\r\n  return (\r\n    <thead>\r\n      <tr>\r\n        <th>Name</th>\r\n        <th>Job</th>\r\n      </tr>\r\n    </thead>\r\n  );\r\n};\r\n\r\nconst TableBody = (props) => {\r\n  const rows = props.characterData.map((row, index) => {\r\n    return (\r\n      <tr key={index}>\r\n        <td>{row.name}</td>\r\n        <td>{row.job}</td>\r\n        <td>\r\n          <button\r\n            className=\"btn btn-primary\"\r\n            onClick={() => props.removeCharacter(index)}\r\n          >\r\n            Delete\r\n          </button>\r\n        </td>\r\n      </tr>\r\n    );\r\n  });\r\n\r\n  return <tbody>{rows}</tbody>;\r\n};\r\n\r\nconst Table = (props) => {\r\n  const { characterData, removeCharacter } = props;\r\n\r\n  return (\r\n    <div className=\"Table\">\r\n      <table className=\"table\">\r\n        <TableHeader />\r\n        <TableBody\r\n          characterData={characterData}\r\n          removeCharacter={removeCharacter}\r\n        />\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","import React, { Component } from \"react\";\r\nimport \"../../css/frameworks/bootstrap.min.css\";\r\nimport \"../../css/frameworks/normalize.css\";\r\n\r\nclass Form extends Component {\r\n  initialState = {\r\n    name: \"\",\r\n    job: \"\",\r\n  };\r\n\r\n  state = this.initialState;\r\n\r\n  handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  submitForm = () => {\r\n    this.props.handleSubmit(this.state);\r\n    this.setState(this.initialState);\r\n  };\r\n\r\n  render() {\r\n    const { name, job } = this.state;\r\n\r\n    return (\r\n      <form className=\"form\">\r\n        <h2>Add Item</h2>\r\n        <label htmlFor=\"name\">Name</label>\r\n        <input\r\n          className=\"form-control\"\r\n          type=\"text\"\r\n          name=\"name\"\r\n          id=\"name\"\r\n          value={name}\r\n          onChange={this.handleChange}\r\n        />\r\n        <label htmlFor=\"job\">Job</label>\r\n        <input\r\n          className=\"form-control\"\r\n          type=\"text\"\r\n          name=\"job\"\r\n          id=\"job\"\r\n          value={job}\r\n          onChange={this.handleChange}\r\n        />\r\n        <input\r\n          class=\"btn btn-primary\"\r\n          type=\"button\"\r\n          value=\"Submit\"\r\n          onClick={this.submitForm}\r\n        />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","import React, { Component } from \"react\";\nimport \"../../css/frameworks/bootstrap.min.css\";\nimport \"../../css/frameworks/normalize.css\";\nimport Table from \"./Table\";\nimport Form from \"./Form\";\n\nclass App extends Component {\n  state = {\n    characters: [\n      {\n        name: \"Jack\",\n        job: \"Entrepreneur\",\n      },\n    ],\n  };\n\n  removeCharacter = (index) => {\n    const { characters } = this.state;\n\n    this.setState({\n      characters: characters.filter((character, i) => {\n        return i !== index;\n      }),\n    });\n  };\n\n  handleSubmit = (character) => {\n    this.setState({ characters: [...this.state.characters, character] });\n  };\n\n  render() {\n    const { characters } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"container-fluid\">\n          <h1>Hello World</h1>\n          <Form handleSubmit={this.handleSubmit} />\n          <Table\n            characterData={characters}\n            removeCharacter={this.removeCharacter}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/frameworks/bootstrap.min.css\";\nimport \"./css/frameworks/normalize.css\";\nimport \"./css/webpages/index.css\";\nimport App from \"./js/components/App\";\nimport * as serviceWorker from \"./js/other/serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}