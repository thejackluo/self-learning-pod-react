{"version":3,"sources":["js/components/Counter.js","js/components/CreatePodForm.js","js/components/App.js","js/other/serviceWorker.js","index.js"],"names":["Counter","state","count","handleIncrement","product","console","log","setState","handleDecrement","this","getBadgeClasses","className","formatCount","onClick","classes","Component","CreatePodFormInput","props","id","type","placeholder","CreatePodForm","showForm","createPodForm","hideForm","renderForm","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2OAkEeA,E,4MA7DbC,MAAQ,CACNC,MAAO,G,EAaTC,gBAAkB,SAACC,GACjBC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CAAEL,MAAO,EAAKD,MAAMC,MAAQ,K,EAG5CM,gBAAkB,SAACJ,GACjBC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CAAEL,MAAO,EAAKD,MAAMC,MAAQ,K,4DAjB7B,IACLA,EAAUO,KAAKR,MAAfC,MACR,OAAiB,IAAVA,EAAc,OAASA,I,+BAkBtB,IAAD,OACOO,KAAKC,kBAEnB,OACE,yBAAKC,UAAU,WACb,0BAAMA,UAAWF,KAAKC,mBAAoBD,KAAKG,eAC/C,4BACEC,QAAS,WACP,EAAKV,gBAAgB,KAEvBQ,UAAU,4BAJZ,aAQA,4BACEE,QAAS,WACP,EAAKL,gBAAgB,KAEvBG,UAAU,yBAJZ,gB,wCAaJ,IAAIG,EAAU,aAMd,OALyB,IAArBL,KAAKR,MAAMC,MACbY,GAAW,iBAEXA,GAAW,iBAENA,M,GA1DWC,aCAhBC,EAAqB,SAACC,GAC1B,OACE,0BAAMC,GAAG,yBACP,2CACA,2BAAOP,UAAU,oBAAoBQ,KAAK,OAAOC,YAAY,aAC7D,kDACA,2BACET,UAAU,oBACVQ,KAAK,OACLC,YAAY,oBAEd,4BAAQT,UAAU,gCAAlB,YAsESU,E,kDAhEb,WAAYJ,GAAQ,IAAD,8BACjB,cAAMA,IAmBRK,SAAW,WACT,EAAKf,SAAS,CACZL,MAAO,EAAKD,MAAMC,MAClBqB,eAAe,KAvBA,EA2BnBC,SAAW,WACT,EAAKjB,SAAS,CACZL,MAAO,EAAKD,MAAMC,MAClBqB,eAAe,KA9BA,EAkCnBE,WAAa,WACX,IAAiC,IAA7B,EAAKxB,MAAMsB,cACb,OAAO,kBAAC,EAAD,OAlCT,EAAKtB,MAAQ,CACXC,MAAO,EACPqB,eAAe,GAJA,E,wDASjBd,KAAKF,SAAS,CACZL,MAAOO,KAAKR,MAAMC,MAAQ,EAC1BqB,cAAed,KAAKR,MAAMsB,kB,oCAM5B,MAAO,IADWd,KAAKR,MAAfC,Q,+BAyBR,OACE,yBAAKS,UAAU,iBACb,kFACA,8CAEE,8BACE,gCAASF,KAAKG,iBAGlB,2DACA,4BAAQD,UAAU,0BAA0BE,QAASJ,KAAKa,UAA1D,kBAGA,4BAAQX,UAAU,0BAA0BE,QAASJ,KAAKe,UAA1D,cAGA,4BAAQb,UAAU,0BAAlB,kBACCF,KAAKgB,kB,GA3DcV,aCsCbW,E,uKAXX,OACE,yBAAKf,UAAU,OACb,yBAAKA,UAAU,mBACb,kBAAC,EAAD,MACA,kBAAC,EAAD,Y,GA3CQI,aCIEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNvC,QAAQuC,MAAMA,EAAMC,a","file":"static/js/main.bbe91ff1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"../../../node_modules/bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../../css/frameworks/normalize.css\";\r\n\r\nclass Counter extends Component {\r\n  state = {\r\n    count: 0,\r\n  };\r\n\r\n  formatCount() {\r\n    const { count } = this.state;\r\n    return count === 0 ? \"Zero\" : count;\r\n  }\r\n\r\n  // constructor() {\r\n  //   super();\r\n  //   this.handleIncrement = this.handleIncrement.bind(this);\r\n  // }\r\n\r\n  handleIncrement = (product) => {\r\n    console.log(product);\r\n    this.setState({ count: this.state.count + 1 });\r\n  };\r\n\r\n  handleDecrement = (product) => {\r\n    console.log(product);\r\n    this.setState({ count: this.state.count - 1 });\r\n  };\r\n\r\n  render() {\r\n    let classes = this.getBadgeClasses();\r\n\r\n    return (\r\n      <div className=\"Counter\">\r\n        <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\r\n        <button\r\n          onClick={() => {\r\n            this.handleIncrement({});\r\n          }}\r\n          className=\"btn btn-secondary btn-sm\"\r\n        >\r\n          Increment\r\n        </button>\r\n        <button\r\n          onClick={() => {\r\n            this.handleDecrement({});\r\n          }}\r\n          className=\"btn btn-danger btn-sm\"\r\n        >\r\n          Decrement\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  getBadgeClasses() {\r\n    let classes = \"badge mx-4\";\r\n    if (this.state.count === 0) {\r\n      classes += \" badge-warning\";\r\n    } else {\r\n      classes += \" badge-primary\";\r\n    }\r\n    return classes;\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n","import React, { Component } from \"react\";\r\nimport \"../../../node_modules/bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../../css/frameworks/normalize.css\";\r\n\r\nconst CreatePodFormInput = (props) => {\r\n  return (\r\n    <form id=\"create-pod-form-input\">\r\n      <label>Pod Name</label>\r\n      <input className=\"form-control my-2\" type=\"text\" placeholder=\"Pod Name\" />\r\n      <label>Pod Description</label>\r\n      <input\r\n        className=\"form-control my-2\"\r\n        type=\"text\"\r\n        placeholder=\"Pod Description\"\r\n      />\r\n      <button className=\"btn btn-outline-success my-2\">Submit</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nclass CreatePodForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      count: 0,\r\n      createPodForm: true,\r\n    };\r\n  }\r\n\r\n  increment() {\r\n    this.setState({\r\n      count: this.state.count + 1,\r\n      createPodForm: this.state.createPodForm,\r\n    });\r\n  }\r\n\r\n  formatCount() {\r\n    const { count } = this.state;\r\n    return \" \" + count;\r\n  }\r\n\r\n  showForm = () => {\r\n    this.setState({\r\n      count: this.state.count,\r\n      createPodForm: true,\r\n    });\r\n  };\r\n\r\n  hideForm = () => {\r\n    this.setState({\r\n      count: this.state.count,\r\n      createPodForm: false,\r\n    });\r\n  };\r\n\r\n  renderForm = () => {\r\n    if (this.state.createPodForm === true) {\r\n      return <CreatePodFormInput />;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"CreatePodForm\">\r\n        <h1>Hello Everyone! Please refer below to create a pod</h1>\r\n        <h5>\r\n          Number of Pods:\r\n          <span>\r\n            <strong>{this.formatCount()}</strong>\r\n          </span>\r\n        </h5>\r\n        <p>Create, change your pod here</p>\r\n        <button className=\"btn btn-outline-success\" onClick={this.showForm}>\r\n          Create new pod\r\n        </button>\r\n        <button className=\"btn btn-outline-warning\" onClick={this.hideForm}>\r\n          Hide Stuff\r\n        </button>\r\n        <button className=\"btn btn-outline-danger\">Clear All Pods</button>\r\n        {this.renderForm()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CreatePodForm;\r\n","import React, { Component } from \"react\";\nimport \"../../../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport \"../../css/frameworks/normalize.css\";\n// import Table from \"./Table\";\n// import Form from \"./Form\";\nimport Counter from \"./Counter\";\nimport CreatePodForm from \"./CreatePodForm\";\n\nclass App extends Component {\n  // state = {\n  //   characters: [\n  //     {\n  //       name: \"Jack\",\n  //       job: \"Entrepreneur\",\n  //     },\n  //   ],\n  // };\n\n  // removeCharacter = (index) => {\n  //   const { characters } = this.state;\n\n  //   this.setState({\n  //     characters: characters.filter((character, i) => {\n  //       return i !== index;\n  //     }),\n  //   });\n  // };\n\n  // handleSubmit = (character) => {\n  //   this.setState({ characters: [...this.state.characters, character] });\n  // };\n\n  render() {\n    /*const { characters } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"container-fluid\">\n          <h1>Hello World</h1>\n          <Form handleSubmit={this.handleSubmit} />\n          <Table\n            characterData={characters}\n            removeCharacter={this.removeCharacter}\n          />\n        </div>\n      </div>\n    ); */\n    return (\n      <div className=\"App\">\n        <div className=\"container-fluid\">\n          <CreatePodForm />\n          <Counter />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport \"./css/frameworks/normalize.css\";\nimport \"./css/webpages/index.css\";\nimport App from \"./js/components/App\";\nimport * as serviceWorker from \"./js/other/serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}